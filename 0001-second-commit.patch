From 2d55b5a46b8b91ffacd356dd8622fc606c2ebe54 Mon Sep 17 00:00:00 2001
From: Vishnu Vilashini S <shreenithya654@gmail.com>
Date: Mon, 2 Oct 2023 14:43:55 +0530
Subject: [PATCH] second commit

---
 forage-jpmc-swe-task-2 - Shortcut.lnk | Bin 0 -> 1556 bytes
 package-lock.json                     |   2 +-
 package.json                          |   2 +-
 src/App.tsx                           |  55 +++++++++++---------------
 src/Graph.tsx                         |  13 +++++-
 5 files changed, 35 insertions(+), 37 deletions(-)
 create mode 100644 forage-jpmc-swe-task-2 - Shortcut.lnk

diff --git a/forage-jpmc-swe-task-2 - Shortcut.lnk b/forage-jpmc-swe-task-2 - Shortcut.lnk
new file mode 100644
index 0000000000000000000000000000000000000000..59001c775460ad01a71de7685ed150b6f882f74f
GIT binary patch
literal 1556
zcmbVMT})J05dIc1MQiLOpjcb$s?h*);Vz5rx>3VFt5F~>vYM=vEiCNf!Y+G>$V=l7
zJk(;EYORg`8k9sNwh!ooKY=IT6nrpZY|`{WtxYu;H8yE&zqzc}<)N|h+{~OaGv|CW
zcV^Dn0Kk%-L=Fra9OYjl1q#<sYWMAZ`Fz|G&D!;?@?zX_XUD*vS)2_c?Uu>?CSQ`2
zj)m2~RE=66yF$vDyD3<%X~#cCUWv<RZhE`e37a8I)E?+f#b!Ma)6s|-NXFCa{WUq+
z#oi-Dx!iGhS}OTuh;qOs43Xq!Y=({iV&p&}d5}_=pB?$gC6=snpi;8INwRZaI=+be
zE%weYRZzLE#=W)ZONO#O?pxv!oA|zTo-Dz)NI?6opHYbrI_R+repun*Dn{=CTIZq0
z^l&j>K~p5=Z>C{w9Dl8MQLxxMV*J~0N-|HB2x!7^j~+%7B1H6~*}$BOY7_GlyMhkC
zzC9nS<A}xHbJ`oke+H#2T?uHiTwUAGX#LF5c4kAeu*1Y_D^pNjwW+A0OtMgCVh$6t
ztxU48vQ97>ge8pZ-4CZksiFl@v~r(HKb?$QHGN7ABr`B-^(kkGQf4PfMvNr#G}5-C
z&kCdgy`i?oNT;rPJf&a{87<<g40Qy%{8mpe76|wzbL%tG5f{{!XlsM2cLr3^s`P7N
zGYH&t;8Z5(59nK5eMtG6o^ajb+4U7iUO%>HTx!?FR!<wlIJJedjIcl25s9k0!xoFR
zH#Va?bY;+Syr*zzB-53az45`L${Ts-KYx;XvgPE0XRrSpdzbwfdwB-&rARhUwdW7*
z+PxBdRnh-yG_6l>TD*<=Msd85w3PI=a#m!rTU_uZ^uF&ud(k(gK3M{3jQ!-|_}6_~
z%CBy4mR$KO?clN>T5q;fFa2mZ&g1N132memB)LQ?3ZSuM4r&UhaqvoMhHV8kT3ol1
zvopTe!9Dqu?fm2l3ZBM~ofaQIa+YAUiKUmHR?Jt<P9)X$p7{Mj5%n`=k7OZ(lz1cF
z-D|)cp81Hxr-9=;Yqz{*k_7V?XHh8UJr1*1tp<LWiI*2;^7L%Z#%c5AqkNhq@t$jG
z$Xs*icIwa_3|EcM8||U~Gm;UnyixC4CtpInr&jR){57zOz9qn)=C+m&?vJ|r-G#Y*
hYj*Z7pgu@~n>4g&1R2ips_*Lu{vPYTzgzTg#=o|5IhFtb

literal 0
HcmV?d00001

diff --git a/package-lock.json b/package-lock.json
index 21b4315..98c1b0c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -25,7 +25,7 @@
       "devDependencies": {
         "awesome-typescript-loader": "^5.2.1",
         "source-map-loader": "^0.2.4",
-        "typescript": "^3.2.4"
+        "typescript": "^3.9.10"
       }
     },
     "node_modules/@ampproject/remapping": {
diff --git a/package.json b/package.json
index ca234e9..dbb4fa6 100644
--- a/package.json
+++ b/package.json
@@ -35,6 +35,6 @@
   "devDependencies": {
     "awesome-typescript-loader": "^5.2.1",
     "source-map-loader": "^0.2.4",
-    "typescript": "^3.2.4"
+    "typescript": "^3.9.10"
   }
 }
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..51e51e3 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,51 +1,45 @@
-import React, { Component } from 'react';
+import React from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
 
-/**
- * State declaration for <App />
- */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
-/**
- * The parent element of the react app.
- * It renders title, button and Graph react element.
- */
-class App extends Component<{}, IState> {
+class App extends React.Component<{}, IState> {
   constructor(props: {}) {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>);
+    }
   }
 
-  /**
-   * Get new data from server and update the state with the new data
-   */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x=0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ 
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x>1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
-  /**
-   * Render the App react component
-   */
   render() {
     return (
       <div className="App">
@@ -54,11 +48,6 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
@@ -67,8 +56,8 @@ class App extends Component<{}, IState> {
           </div>
         </div>
       </div>
-    )
+    );
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..35e9de9 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,6 +48,15 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivotes', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+        {"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}`);
       elem.load(this.table);
     }
   }
-- 
2.41.0.windows.3

